<?php    namespace Bitrix\DateDeliveryHelper;    use Bitrix\Main\Config\Option;    class OptionsHelper {        public $moduleID = 'datedeliveryhelper';        public $arrRules = ['time_from', 'time_to', 'type_date', 'count_days', 'count_week', 'time_delivery_1', 'time_delivery_2', 'time_delivery_3', 'priority'];        public $weeksDays = [            '0' => 'Не выбрано',            'monday' => 'Понедельник',            'tuesday' => 'Вторник',            'wednesday' => 'Среда',            'thursday' => 'Четверг',            'friday' => 'Пятница',            'saturday' => 'Суббота',            'sunday' => 'Воскресение',        ];        public function __construct(){            \Bitrix\Main\Loader::includeModule('sale');        }        /**         * Действия при отправке формы         */        public function actionPost() {            $request = \Bitrix\Main\HttpApplication::getInstance()->getContext()->getRequest();            if($request->isPost() && check_bitrix_sessid()){                if ($request['delete']) {                    foreach ($request['delete_rule'] as $idDelivery => $numbers) {                        foreach ($numbers as $number) {                            $this->deleteRule($idDelivery, $number);                        }                    }                } else if ($request['add']) {                    $this->setNewRules($request['new']);                } else if ($request['edit_delivery']) {                    foreach ($request['edit'] as $name => $value) {                        $valueOld = $this->getOption($name);                        if ($valueOld !== $value) {                            $this->setOption($name, $value);                        }                    }                } else if ($request['holiday_add']) {                    $holiday = new Holidays();                    $holiday->addHoliday($request['holiday']['date-start'], $request['holiday']['date-finish']);                } else if ($request['logsis_edit']) {                    foreach ($request['logsis'] as $name => $value) {                        $this->setOption($name, $value);                    }                }            }        }        /**         * Возвращает все типы доставок         * @return array         */        public function GetDeliveries(): array        {            $result = [];            $deliveries = \Bitrix\Sale\Delivery\Services\Table::getList(                [                    'select' => ['ID', 'NAME']                ]            )->fetchAll();            foreach($deliveries as $delivery)            {                    $result[strval($delivery['ID'])] = $delivery['NAME'];            }            return $result;        }        /**         * Получает список правил по одной доставке         * @param $idDelivery         *         * @return false         */        public function getRules($idDelivery) {            $result = false;            $strNumbers = $this->getOption('rules_' . $idDelivery . '_numbers');            if ($strNumbers) {                $arrNumbers = explode(',', $strNumbers);                foreach ($arrNumbers as $number) {                    if ($number === '') {                        continue;                    }                    foreach ($this->arrRules as $rule) {                        $ruleStr = 'rule_' . $idDelivery . '_' . $number . '_' . $rule;                        $ruleValue = $this->getOption($ruleStr);                            $result[$number][$ruleStr] = $ruleValue;                    }                }            }            return $result;        }        /**         * Устанавливает новое правило для расчета         * @return false         */        public function setNewRules($new){            $result = false;            $transformNew = $this->transFormNewRule($new);            if ($transformNew) {                foreach ($transformNew as $name => $rule) {                    $this->setOption($name, $rule);                }            }            return $result;        }        /**         * Получает колличество существующих правил для доставки         *         * @param $id         *         * @return array         */        public function getListRulesForDelivery($id){            $result = [];            $numbers = Option::get($this->moduleID, 'rules_' . $id . '_numbers');            if ($numbers) {                $arrNumbers = explode(',', $numbers);                $result['all'] = $numbers;                foreach ($arrNumbers as $number) {                    if ($number !== '') {                        $result['last'] = (int)$number;                    }                }            } else {                $result['all'] = '';                $result['last'] = 0;            }            return $result;        }        public function deleteOption($name) {            return Option::delete($this->moduleID, array(                'name' =>$name));        }        public function setOption($name, $value) {            return Option::set($this->moduleID, $name, $value);        }        public function getOption($name) {            return Option::get($this->moduleID, $name);        }        public function deleteRule($idDelivery, $numberRule) {            $strRule = 'rule_' . $idDelivery . '_' . $numberRule . '_';            foreach ($this->arrRules as $rule) {                $this->deleteOption($strRule . $rule);            }            $strNumber = $this->getOption('rules_' . $idDelivery . '_numbers');            $arrNumbers = explode(',', $strNumber);            foreach ($arrNumbers as $key => $number) {                if ((int)$number === (int)$numberRule) {                    unset($arrNumbers[$key]);                }            }            $finalNumbers = implode(',', $arrNumbers);            $this->setOption('rules_' . $idDelivery . '_numbers', $finalNumbers);        }        /**         * Подготавлиает массив для установки правил         * @param $arrNew         *         * @return false         */        public function transFormNewRule($arrNew){            $result = false;            if ($arrNew['delivery_id'] > 0) {                $arrNumbers = $this->getListRulesForDelivery($arrNew['delivery_id']);                $lastNumber = $arrNumbers['last'];                $numbers = $arrNumbers['all'];                $ruleStr = 'rule_' . $arrNew['delivery_id'] . '_' . ($lastNumber + 1);                foreach ($arrNew as $key => $value) {                    if ($key === 'delivery_id') {                        continue;                    }                    switch ($key) {                        case 'delivery_id':                            break;                        default:                                $result[$ruleStr . '_' . $key] = $value;                            break;                    }                }                if ($result) {                    $result['rules_' . $arrNew['delivery_id'] . '_numbers'] = $numbers . ($lastNumber + 1) . ',';                }            }            return $result;        }        public function getRulesForTabs($arrDeliveries){            $rules = [];            $rulesForTabs = [];            foreach ($arrDeliveries as $id => $name) {                $rules[$id] = $this->getRules($id);                if ($rules[$id]) {                    foreach ($rules[$id] as $nubmer => $deliveryRules) {                        $rulesForTabs['EDIT'][] = $name . ' Правило ' . $nubmer;                        $rulesForTabs['DELETE'][$id][$nubmer] = $name . ' Правило ' . $nubmer;                        $priority = '';                        foreach ($deliveryRules as $code => $deliveryRule) {                            if (strpos($code, 'type_date')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Дата доставки',                                    $deliveryRule,                                    ["selectbox", [                                        'today' => 'В этот же день',                                        "days"  => 'Через (n) дней',                                        "week" => 'Ближайший день недели'                                    ]]                                ];                            } elseif (strpos($code, 'time_from')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Временной промежуток (от)',                                    $deliveryRule,                                    ["text", 5]                                ];                            } elseif (strpos($code, 'time_to')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Временной промежуток (до)',                                    $deliveryRule,                                    ["text", 5]                                ];                            } elseif (strpos($code, 'count_days')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Сегодня + (дней)',                                    $deliveryRule,                                    ["text", 5]                                ];                            } else if (strpos($code, 'time_delivery')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Промежуток доставки',                                    $deliveryRule,                                    ["text",11]                                ];                            } else if (strpos($code, 'count_week')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'День недели (ближайший)',                                    $deliveryRule,                                    ["selectbox", $this->weeksDays]                                ];                            } else if (strpos($code, 'priority')) {                                $rulesForTabs['EDIT'][] = [                                    'edit[' . $code . ']',                                    'Приоритет интервалов',                                    $deliveryRule,                                    ["selectbox", [                                        'N' => 'Нет',                                        "Y"  => 'Да',                                    ]]                                ];                            }                        }                    }                }            }            return $rulesForTabs;        }    }