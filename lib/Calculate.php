<?php namespace Bitrix\DateDeliveryHelper;use Bitrix\Main\Config\Option;class Calculate {    public function calculate($idDelivery, $time) {        $result = [];        $optionHelper = new OptionsHelper();        $rules = $optionHelper->getRules($idDelivery);        if ($rules) {            $result = $this->getDates($rules, $time, $idDelivery, $date = date('d.m.Y'));            $additionalDate = $this->getAdditionalDates(date('d.m.Y',strtotime('tomorrow')), $rules, $idDelivery);            foreach ($additionalDate as $date => $intervals) {                foreach ($intervals as $interval) {                        $result[$date][$interval] = $interval;                }            }            $result = $this->transformIntervals($result, $rules);        }        if (!empty($result)) {            $dateArray = [];            foreach($result as $key=>$arr){                $dateArray[$key]=$arr;            }            array_multisort($dateArray, SORT_STRING, $result);                        foreach ($result as $date => $arrTime) {                ksort($result[$date]);            }        }        return $result;    }    public function transformIntervals($intervals, $rules){        foreach ($intervals as $date => $ranges) {            foreach ($ranges as $range) {                $arrRange = explode('-',$range);                $startRange = $arrRange[0];                $finishRange = $arrRange[1];                foreach ($ranges as $additionalRanges) {                    if ($additionalRanges === $range) {                        continue;                    } else {                        $arrRangeAdditional = explode('-',$additionalRanges);                        $startRangeAdditional = $arrRangeAdditional[0];                        $finishRangeAdditional = $arrRangeAdditional[1];                        if (                            (strtotime($startRange) > strtotime($startRangeAdditional) && strtotime($startRange) < strtotime($finishRangeAdditional))                        ||                            (strtotime($finishRange) > strtotime($startRangeAdditional) && strtotime($finishRange) < strtotime($finishRangeAdditional))                        ) {                            foreach ($rules as $numberRule => $arRule) {                                foreach ($arRule as $name => $rule) {                                    if ($rule === $additionalRanges) {                                        $ruleOne['INTERVAL'] = $rule;                                        $ruleOne['NUMBER_RULE'] = $numberRule;                                    } else if ($rule === $range) {                                        $ruleTwo['INTERVAL'] = $rule;                                        $ruleTwo['NUMBER_RULE'] = $numberRule;                                    }                                }                            }                            foreach ($rules[$ruleOne['NUMBER_RULE']] as $name => $rule) {                                if (strpos($name, 'priority')) {                                    $ruleOne['PRIORITY'] = $rule;                                }                            }                            foreach ($rules[$ruleTwo['NUMBER_RULE']] as $name => $rule) {                                if (strpos($name, 'priority')) {                                    $ruleTwo['PRIORITY'] = $rule;                                }                            }                            if ($ruleTwo['PRIORITY'] === 'Y') {                                unset($intervals[$date][$ruleOne['INTERVAL']]);                            } elseif ($ruleOne['PRIORITY'] === 'Y') {                                unset($intervals[$date][$ruleTwo['INTERVAL']]);                            }                        }                    }                }            }        }        return $intervals;    }    public function getDates($rules, $time, $idDelivery, $date, $dateFinish = false, $dateStart = false){        $result = [];        $suitableRulesNumbers = $this->getRulesForTime($rules, $time);        foreach ($suitableRulesNumbers as $suitableRulesNumber) {            $typeDate = $this->typeDate($rules[$suitableRulesNumber]);            $dateDelivery = $this->getDateDeliveryClosest($typeDate, $rules[$suitableRulesNumber], $date);            $dateDelivery = $this->checkHolidays($dateDelivery)['DATE'];            if ($dateFinish) {                if (strtotime($dateDelivery) >= strtotime($date) && strtotime($dateDelivery) <= strtotime($dateFinish)) {                    foreach ($rules[$suitableRulesNumber] as $name => $rule) {                        if (strpos($name, 'time_delivery') && $rule !== '-') {                            $result[$dateDelivery][$rule] = $rule;                        }                    }                }            } else {                foreach ($rules[$suitableRulesNumber] as $name => $rule) {                    if (strpos($name, 'time_delivery') && $rule !== '-') {                        $result[$dateDelivery][$rule] = $rule;                    }                }            }        }        return $result;    }    public function checkHolidays($date) {        $result = ['EDIT' => false, 'DATE' => $date];        $holidays = new Holidays();        $holidaysList = $holidays->getListOfHolidays();        if (!empty($holidaysList)) {            foreach ($holidaysList as $arrHolidays) {                $dataStart = $arrHolidays['START'];                $dataFinish = $arrHolidays['FINISH'];                if (strtotime($date) >= strtotime($dataStart) && strtotime($date) <= strtotime($dataFinish)) {                    $result['DATE'] = date('d.m.Y', strtotime($dataFinish . ' + 1 days'));                    $result['EDIT'] = true;                }            }        }        return $result;    }    public function getRulesForTime($rules, $time) {        $result = [];        foreach ($rules as $numberRule => $arRule) {            foreach ($arRule as $name => $rule) {                if (strpos($name, 'time_from')) {                    $timeFrom = $arRule[$name];                }                if (strpos($name, 'time_to')) {                    $timeTo = $arRule[$name];                }            }            if (strtotime($timeFrom) > strtotime($timeTo)) {                $timeTo = date('d.m.Y H:i',strtotime('tomorrow ' . $timeTo));            }            if(strtotime($time) >= strtotime($timeFrom) && strtotime($time) <= strtotime($timeTo)) {                $result[] = $numberRule;            }        }        return $result;    }    public function getDateDeliveryClosest($typeDate, $arrRule, $date){        $result = '';        switch ($typeDate){                case 'today':                    $result = $date;                    break;                case 'days':                    foreach ($arrRule as $name => $rule) {                        if (strpos($name, 'count_days')) {                            $countDays = (int)$arrRule[$name];                        }                    }                    if ($countDays) {                        $result = date('d.m.Y', strtotime($date . '+' . $countDays . ' days'));                    }                    break;                case 'week':                    foreach ($arrRule as $name => $rule) {                        if (strpos($name, 'count_week')) {                            $countWeek = (int)$arrRule[$name];                        }                    }                    if ($countWeek) {                        $result = date('d.m.Y', strtotime($date . ' next ' .  $countWeek));                    }                    break;                default:                    break;            }            return $result;    }    public function typeDate($arRule) {        $typeDate = '';            foreach ($arRule as $name => $rule) {                if (strpos($name, 'type_date')) {                    $typeDate = $arRule[$name];                }            }        return $typeDate;    }    public function getAdditionalDates($date, $rules, $idDelivery) {        $result = [];        $dateFinis = date('d.m.Y', strtotime($date . '+5 days'));        $arrdates = $this->dateRange($date, $dateFinis);        $dates = $arrdates['DATES'];        $dateFinis = $arrdates['FINISH'];        foreach ($rules as $numberRule => $arRule) {            $typeDate = $this->typeDate($arRule);            $dateDelivery = $this->getDateDeliveryClosest($typeDate, $arRule, $date);            $dateDelivery = $this->checkHolidays($dateDelivery)['DATE'];            while (strtotime($dateDelivery) <= strtotime($dateFinis)) {                if (!$this->checkHolidays($dateDelivery)['EDIT']) {                    foreach ($arRule as $name => $rule) {                        if (strpos($name, 'time_delivery') && $rule !== '-') {                            $result[$dateDelivery][$rule] = $rule;                        }                    }                }                $dateDelivery = date('d.m.Y', strtotime($dateDelivery . ' + 1 days'));            }        }        return $result;    }    public function dateRange($first, $last, $step = '+1 day', $output_format = 'd.m.Y' ) {        $dates = array();        $current = strtotime($first);        $last = strtotime($last);        while( $current <= $last ) {            $edit = $this->checkHolidays(date($output_format, $current))['EDIT'];            if ($edit) {                $last = strtotime($step, $last);                $current = strtotime($step, $current);            }            $dates['DATES'][] = date($output_format, $current);            $current = strtotime($step, $current);        }        $dates['FINISH'] = date($output_format, $last);        return $dates;    }}